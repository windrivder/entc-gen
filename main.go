package main

import (
	"bytes"
	"embed"
	"flag"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	"golang.org/x/tools/imports"
)

//go:embed template/*.tmpl
var tmplPath embed.FS

var configPath = flag.String("path", "./store/rdb/schema", "schema path, eg: -path store/rdb/schema")

type Node struct {
	*gen.Type
	LowerName string
	TitleName string
}

func main() {
	flag.Parse()

	graph, err := entc.LoadGraph(*configPath, &gen.Config{})
	if err != nil {
		log.Fatal(err)
	}

	dirs, err := tmplPath.ReadDir("template")
	if err != nil {
		log.Fatal(err)
	}

	for _, entry := range dirs {
		info, err := entry.Info()
		if err != nil {
			log.Fatal(err)
		}

		path := filepath.Join("template", info.Name())
		if err := handler(graph, path, info, err); err != nil {
			log.Fatal(err)
		}
	}
}

// toTitle AccountAction => accountAction
func toTitle(str string) string {
	if len(str) > 0 {
		firstChar := strings.ToLower(string(str[0]))
		return firstChar + str[1:]
	}
	return str
}

func handler(graph *gen.Graph, path string, info os.FileInfo, err error) error {
	if err != nil || info.IsDir() {
		return nil
	}
	if !strings.HasSuffix(info.Name(), ".tmpl") {
		return nil
	}

	// 根据模版规则创建目录
	// model.entity.tmpl => ./model
	dirs := strings.Split(info.Name(), ".")
	target := filepath.Join(dirs[0 : len(dirs)-1]...)
	if info.Name() == "model.gen.tmpl" {
		target = "model"
	}
	_ = os.MkdirAll(target, 0o755)

	// 渲染
	for _, node := range graph.Nodes {
		// 生成模版对象
		data, err := fs.ReadFile(tmplPath, path)
		if err != nil {
			return err
		}
		text := string(data)
		tmpl, err := template.New(info.Name()).Funcs(gen.Funcs).Parse(text)
		if err != nil {
			return err
		}

		// 判断文件是否可删除
		filename := filepath.Join(target, node.Label()+".go")
		if info.Name() == "model.gen.tmpl" {
			filename = filepath.Join(target, "z_"+node.Label()+".go")
		}
		_, err = os.Stat(filename)
		if err == nil && !strings.HasPrefix(text, "// Code generated by") {
			continue
		}
		_ = os.Remove(filename)

		// 渲染并格式化
		b := bytes.NewBuffer(nil)
		if err := tmpl.Execute(b, &Node{
			Type:      node,
			LowerName: strings.ToLower(node.Name),
			TitleName: toTitle(node.Name),
		}); err != nil {
			return err
		}
		src, err := imports.Process(filename, b.Bytes(), nil)
		if err != nil {
			return err
		}
		fp, err := os.Create(filename)
		if err != nil {
			return err
		}
		src = []byte(strings.ReplaceAll(string(src), ",omitempty", ""))
		_, _ = fp.Write(src)
		_ = fp.Close()
	}

	return nil
}
