// Code generated by ent, DO NOT EDIT.
package gen

{{- $lastField := index $.Fields 0 }}
{{- range $tmp := $.Fields }}
    {{ $lastField = $tmp }}
{{- end }}

var _ {{ $.Name }}Logic = (*{{ $.LowerName }}Logic)(nil)

type {{ $.Name }}Logic interface {
	Create(ctx context.Context, req *model.{{ $.Name }}) (*model.{{ $.Name }}, error)
	CreateBulk(ctx context.Context, req []*model.{{ $.Name }}) ([]*model.{{ $.Name }}, error)
	DeleteByID(ctx context.Context, id int64) error
	DeleteByIDs(ctx context.Context, ids ...int64) (int64, error)
	UpdateByID(ctx context.Context, id int64, req *model.{{ $.Name }}Update) (*model.{{ $.Name }}, error)
	UpdateByIDs(ctx context.Context, ids []int64, req *model.{{ $.Name }}Update) (int64, error)
	GetByID(ctx context.Context, id int64) (*model.{{ $.Name }}, error)
	List(ctx context.Context, filter *model.{{ $.Name }}Filter) ([]*model.{{ $.Name }}, error)
	Paginate(ctx context.Context, filter *model.{{ $.Name }}Filter, orders model.{{ $.Name }}Orders) ([]*model.{{ $.Name }}, int64, error)
}

func New{{ $.Name }}Logic() {{ $.Name }}Logic {
	return &{{ $.LowerName }}Logic{}
}

type {{ $.LowerName }}Logic struct {}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) Create(ctx context.Context, req *model.{{ $.Name }}) (*model.{{ $.Name }}, error) {
	return dao.New{{ $.Name }}Dao().Create(ctx, req)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) CreateBulk(ctx context.Context, req []*model.{{ $.Name }}) ([]*model.{{ $.Name }}, error) {
	return dao.New{{ $.Name }}Dao().CreateBulk(ctx, req)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) DeleteByID(ctx context.Context, id int64) error {
	return dao.New{{ $.Name }}Dao().DeleteByID(ctx, id)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) DeleteByIDs(ctx context.Context, ids ...int64) (int64, error) {
	return dao.New{{ $.Name }}Dao().DeleteByIDs(ctx, ids...)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) UpdateByID(ctx context.Context, id int64, req *model.{{ $.Name }}Update) (*model.{{ $.Name }}, error) {
	return dao.New{{ $.Name }}Dao().UpdateByID(ctx, id, req)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) UpdateByIDs(ctx context.Context, ids []int64, req *model.{{ $.Name }}Update) (int64, error) {
	return dao.New{{ $.Name }}Dao().UpdateByIDs(ctx, ids, req)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) GetByID(ctx context.Context, id int64) (*model.{{ $.Name }}, error) {
	return dao.New{{ $.Name }}Dao().GetByID(ctx, id)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) List(ctx context.Context, filter *model.{{ $.Name }}Filter) ([]*model.{{ $.Name }}, error) {
	return dao.New{{ $.Name }}Dao().List(ctx, filter)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Logic) Paginate(ctx context.Context, filter *model.{{ $.Name }}Filter, orders model.{{ $.Name }}Orders) ([]*model.{{ $.Name }}, int64, error) {
	return dao.New{{ $.Name }}Dao().Paginate(ctx, filter, orders)
}
