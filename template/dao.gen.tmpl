// Code generated by ent, DO NOT EDIT.
package gen

{{- $lastField := index $.Fields 0 }}
{{- range $tmp := $.Fields }}
    {{ $lastField = $tmp }}
{{- end }}

var _ {{ $.Name }}Dao = (*{{ $.LowerName }}Dao)(nil)

type {{ $.Name }}Dao interface {
	ToModel(req *rdb.{{ $.Name }}) *model.{{ $.Name }}
	ToModels(req []*rdb.{{ $.Name }}) []*model.{{ $.Name }}
	Create(ctx context.Context, req *model.{{ $.Name }}) (*model.{{ $.Name }}, error)
	CreateBulk(ctx context.Context, req []*model.{{ $.Name }}) ([]*model.{{ $.Name }}, error)
	Upsert(ctx context.Context, req *model.{{ $.Name }}) error
	UpsertBulk(ctx context.Context, req []*model.{{ $.Name }}) error
	DeleteByID(ctx context.Context, id int64) error
	DeleteByIDs(ctx context.Context, ids ...int64) (int64, error)
	Delete(ctx context.Context, filter {{ $.Name }}Filter) (int64, error)
	UpdateByID(ctx context.Context, id int64, req {{ $.Name }}Update) (*model.{{ $.Name }}, error)
	UpdateByIDs(ctx context.Context, ids []int64, req {{ $.Name }}Update) (int64, error)
	Update(ctx context.Context, filter {{ $.Name }}Filter, update {{ $.Name }}Update) (int64, error)
	UpdateOneID(ctx context.Context, req *model.{{ $.Name }}, fields ...string) (*model.{{ $.Name }}, error)
	UpdateOne(ctx context.Context, req *model.{{ $.Name }}, filter {{ $.Name }}Filter, fields ...string) (*model.{{ $.Name }}, error)
	Exist(ctx context.Context, filter {{ $.Name }}Filter) (bool, error)
	Count(ctx context.Context, filter {{ $.Name }}Filter) (int64, error)
{{- range $f := $.Fields }}
    {{- if eq $f.StructField "Name" }}
	GetByName(ctx context.Context, name string) (*model.{{ $.Name }}, error)
    {{- end }}
{{- end }}
	GetByID(ctx context.Context, id int64) (*model.{{ $.Name }}, error)
	Get(ctx context.Context, filter {{ $.Name }}Filter) (*model.{{ $.Name }}, error)
	ListIDs(ctx context.Context, filter {{ $.Name }}Filter) ([]int64, error)
	ListByIDs(ctx context.Context, ids ...int64) ([]*model.{{ $.Name }}, error)
	List(ctx context.Context, filter {{ $.Name }}Filter, orders ...{{ $.Name }}Order) ([]*model.{{ $.Name }}, error)
	Paginate(ctx context.Context, filter {{ $.Name }}Filter, orders ...{{ $.Name }}Order) ([]*model.{{ $.Name }}, int64, error)
}

func New{{ $.Name }}Dao() {{ $.Name }}Dao {
	return &{{ $.LowerName }}Dao{}
}

type {{ $.LowerName }}Dao struct {}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) ToModel(req *rdb.{{ $.Name }}) *model.{{ $.Name }} {
	obj := &model.{{ $.Name }}{
		ID: req.ID,
    {{- range $f := $.Fields }}
		{{ $f.StructField }}: req.{{ $f.StructField }},
    {{- end }}
	}

	{{- range $e := $.Edges }}
        {{ if not $e.Unique }}
    if len(req.Edges.{{ $e.StructField }}) > 0 {
		items := make([]*model.{{ $e.Type.Name }}, len(req.Edges.{{ $e.StructField }}))
		for idx, item := range req.Edges.{{ $e.StructField }} {
			items[idx] = new({{ lower $e.Type.Name }}Dao).ToModel(item)
		}
		obj.{{ $e.StructField }} = items
    }
        {{ else }}
	if req.Edges.{{ $e.StructField }} != nil {
		obj.{{ $e.StructField }} = new({{ lower $e.Type.Name }}Dao).ToModel(req.Edges.{{ $e.StructField }})
	}
        {{ end }}
	{{- end }}

    return obj
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) ToModels(req []*rdb.{{ $.Name }}) []*model.{{ $.Name }} {
	builders := make([]*model.{{ $.Name }}, len(req))
	for idx, item := range req {
		builders[idx] = {{ $.Receiver }}.ToModel(item)
	}
	return builders
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) create(ctx context.Context, req *model.{{ $.Name }}) *rdb.{{ $.Name }}Create {
	return rdb.DB(ctx).{{ $.Name }}.Create().
    {{- range $i, $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
	Set{{ $f.StructField }}(req.{{ $f.StructField }}){{- if eq $lastField.StructField $f.StructField }}{{- else }}.{{- end }}
        {{- end }}
    {{- end }}
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) createBulk(ctx context.Context, req []*model.{{ $.Name }}) []*rdb.{{ $.Name }}Create {
	builders := make([]*rdb.{{ $.Name }}Create, len(req))
	for idx, item := range req {
		builders[idx] = rdb.DB(ctx).{{ $.Name }}.Create().
    {{- range $i, $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
	Set{{ $f.StructField }}(item.{{ $f.StructField }}){{- if eq $lastField.StructField $f.StructField }}{{- else }}.{{- end }}
        {{- end }}
    {{- end }}
	}
	return builders
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Create(ctx context.Context, req *model.{{ $.Name }}) (*model.{{ $.Name }}, error) {
	obj, err := {{ $.Receiver }}.create(ctx, req).Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModel(obj), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Upsert(ctx context.Context, req *model.{{ $.Name }}) error {
	return {{ $.Receiver }}.create(ctx, req).OnConflictColumns().UpdateNewValues().Exec(ctx)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) UpsertBulk(ctx context.Context, req []*model.{{ $.Name }}) error {
	builders := {{ $.Receiver }}.createBulk(ctx, req)
	return rdb.DB(ctx).{{ $.Name }}.CreateBulk(builders...).OnConflictColumns().UpdateNewValues().Exec(ctx)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) CreateBulk(ctx context.Context, req []*model.{{ $.Name }}) ([]*model.{{ $.Name }}, error) {
	builders := {{ $.Receiver }}.createBulk(ctx, req)
	objs, err := rdb.DB(ctx).{{ $.Name }}.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModels(objs), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) DeleteByID(ctx context.Context, id int64) error {
	return rdb.DB(ctx).{{ $.Name }}.DeleteOneID(id).Exec(ctx)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) DeleteByIDs(ctx context.Context, ids ...int64) (int64, error) {
	count, err := rdb.DB(ctx).{{ $.Name }}.Delete().Where({{ $.LowerName }}.IDIn(ids...)).Exec(ctx)
	return int64(count), err
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Delete(ctx context.Context, filter {{ $.Name }}Filter) (int64, error) {
	count, err := rdb.DB(ctx).{{ $.Name }}.Delete().Where(filter.GetFilter()...).Exec(ctx)
	return int64(count), err
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) UpdateByID(ctx context.Context, id int64, req {{ $.Name }}Update) (*model.{{ $.Name }}, error) {
	obj, err := rdb.DB(ctx).{{ $.Name }}.UpdateOneID(id).
    {{- range $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
		Set{{- if not $f.Type.Nillable }}Nillable{{- end }}{{ $f.StructField }}(req.Get{{ $f.StructField }}()).
        {{- end }}
    {{- end }}
		Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModel(obj), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) UpdateByIDs(ctx context.Context, ids []int64, req {{ $.Name }}Update) (int64, error) {
	count, err := rdb.DB(ctx).{{ $.Name }}.Update().Where({{ $.LowerName }}.IDIn(ids...)).
    {{- range $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
		Set{{- if not $f.Type.Nillable }}Nillable{{- end }}{{ $f.StructField }}(req.Get{{ $f.StructField }}()).
        {{- end }}
    {{- end }}
		Save(ctx)
	if err != nil {
		return 0, err
	}
	return int64(count), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Update(ctx context.Context, filter {{ $.Name }}Filter, update {{ $.Name }}Update) (int64, error) {
	count, err := rdb.DB(ctx).{{ $.Name }}.Update().Where(filter.GetFilter()...).
    {{- range $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
		Set{{- if not $f.Type.Nillable }}Nillable{{- end }}{{ $f.StructField }}(update.Get{{ $f.StructField }}()).
        {{- end }}
    {{- end }}
		Save(ctx)
	return int64(count), err
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) UpdateOneID(ctx context.Context, req *model.{{ $.Name }}, fields ...string) (*model.{{ $.Name }}, error) {
	builder := rdb.DB(ctx).{{ $.Name }}.UpdateOneID(req.ID)
	for _, field := range fields {
		switch field {
    {{- range $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
			case {{ $.LowerName }}.{{ $f.Constant }}:
			builder.Set{{ $f.StructField }}(req.{{ $f.StructField }})
        {{- end }}
    {{- end }}
		}
	}
	obj, err := builder.Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModel(obj), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) UpdateOne(ctx context.Context, req *model.{{ $.Name }}, filter {{ $.Name }}Filter, fields ...string) (*model.{{ $.Name }}, error) {
	builder := rdb.DB(ctx).{{ $.Name }}.Update().Where(filter.GetFilter()...)
	for _, field := range fields {
		switch field {
    {{- range $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
			case {{ $.LowerName }}.{{ $f.Constant }}:
			builder.Set{{ $f.StructField }}(req.{{ $f.StructField }})
        {{- end }}
    {{- end }}
		}
	}
	_, err := builder.Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.Get(ctx, filter)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Exist(ctx context.Context, filter {{ $.Name }}Filter) (bool, error) {
	return rdb.DB(ctx).{{ $.Name }}.Query().Where(filter.GetFilter()...).Exist(ctx)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Count(ctx context.Context, filter {{ $.Name }}Filter) (int64, error) {
	count, err := rdb.DB(ctx).{{ $.Name }}.Query().Where(filter.GetFilter()...).Count(ctx)
	return int64(count), err
}

{{ range $f := $.Fields }}
    {{- if eq $f.StructField "Name" }}
func ({{ $.Receiver }} *{{ $.LowerName }}Dao) GetByName(ctx context.Context, name string) (*model.{{ $.Name }}, error) {
	obj, err := rdb.DB(ctx).{{ $.Name }}.Query().Where({{ $.LowerName }}.Name(name)).{{ if $f.Unique }}Only{{ else }}First{{ end }}(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModel(obj), nil
}
    {{- end }}
{{ end }}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) GetByID(ctx context.Context, id int64) (*model.{{ $.Name }}, error) {
	obj, err := rdb.DB(ctx).{{ $.Name }}.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModel(obj), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Get(ctx context.Context, filter {{ $.Name }}Filter) (*model.{{ $.Name }}, error) {
	obj, err := rdb.DB(ctx).{{ $.Name }}.Query().Where(filter.GetFilter()...).Only(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModel(obj), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) ListByIDs(ctx context.Context, ids ...int64) ([]*model.{{ $.Name }}, error) {
	objs, err := rdb.DB(ctx).{{ $.Name }}.Query().
		Where({{ $.LowerName }}.IDIn(ids...)).
		All(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModels(objs), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) ListIDs(ctx context.Context, filter {{ $.Name }}Filter) ([]int64, error) {
	return rdb.DB(ctx).{{ $.Name }}.Query().
		Where({filter.GetFilter()...).
		IDs(ctx)
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) List(ctx context.Context, filter {{ $.Name }}Filter, orders ...{{ $.Name }}Order) ([]*model.{{ $.Name }}, error) {
	opts := []{{ $.LowerName }}.OrderOption{}
	for idx := range orders {
		opts = append(opts, orders[idx].GetOrder()...)
	}

	objs, err := rdb.DB(ctx).{{ $.Name }}.Query().
		Where(filter.GetFilter()...).
		Order(opts...).
		All(ctx)
	if err != nil {
		return nil, err
	}
	return {{ $.Receiver }}.ToModels(objs), nil
}

func ({{ $.Receiver }} *{{ $.LowerName }}Dao) Paginate(ctx context.Context, filter {{ $.Name }}Filter, orders ...{{ $.Name }}Order) ([]*model.{{ $.Name }}, int64, error) {
	opts := []{{ $.LowerName }}.OrderOption{}
	for idx := range orders {
		opts = append(opts, orders[idx].GetOrder()...)
	}

	query := rdb.DB(ctx).{{ $.Name }}.Query().
		Where(filter.GetFilter()...).
		Order(opts...)

	// total
	count, err := query.Count(ctx)
	if err != nil {
		return nil, 0, err
	}

	// paginate
	page := filter.GetPage()
	pageSize := filter.GetPageSize()
	offset := (page - 1) * pageSize
	objs, err := query.Limit(int(pageSize)).Offset(int(offset)).All(ctx)
	if err != nil {
		return nil, 0, err
	}

	return {{ $.Receiver }}.ToModels(objs), int64(count), nil
}

type {{ $.Name }}Filter interface {
	GetPage() int64
	GetPageSize() int64
	GetFilter() []predicate.{{ $.Name }}
}

type {{ $.Name }}Update interface {
{{- range $f := $.Fields }}
    {{- if eq $f.StructField "Created" "Updated" }}
    {{- else }}
	Get{{ $f.StructField }}() {{- if not $f.Type.Nillable }}*{{- end }}{{ $f.Type }}
    {{- end }}
{{- end }}
	GetColumns() []string
}

type {{ $.Name }}Order interface {
	GetOrder() []{{ $.LowerName }}.OrderOption
}
