// Code generated by ent, DO NOT EDIT.
package model

type {{ $.Name }} struct {
	ID int64 `json:"id"`
	{{- range $f := $.Fields }}
		{{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
		{{ $f.StructField }} {{ $f.Type }} `{{ $tag }}`
	{{- end }}
	{{- range $e := $.Edges }}
		{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}*{{ $e.Type.Name }}
	{{- end }}
}

type {{ $.TitleName }}Filter struct {
	ID *int64
	IDs []int64
	{{- range $f := $.Fields }}
		{{ $f.StructField }} {{- if not $f.Type.Nillable }}*{{- end }}{{ $f.Type }} 
	{{- end }}
	Page *int64
	PageSize *int64
	pointer *{{ $.Name }}Filter
}

func New{{ $.Name }}Filter() *{{ $.Name }}Filter {
	{{ $.Receiver }} := &{{ $.Name }}Filter{}
	{{ $.Receiver }}.{{ $.TitleName }}Filter = &{{ $.TitleName }}Filter{pointer: {{ $.Receiver }}}
	return {{ $.Receiver }}
}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) SetID(i int64) *{{ $.Name }}Filter {
	{{ $.Receiver }}.ID = &i
	return {{ $.Receiver }}.pointer
}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) SetIDs(i ...int64) *{{ $.Name }}Filter {
	{{ $.Receiver }}.IDs = i
	return {{ $.Receiver }}.pointer
}

{{- range $f := $.Fields }}
func ({{ $.Receiver }} *{{ $.TitleName }}Filter) Set{{ $f.StructField }}(i {{ $f.Type }}) *{{ $.Name }}Filter {
	{{ $.Receiver}}.{{ $f.StructField }} = {{- if not $f.Type.Nillable }}&{{- end }}i
	return {{ $.Receiver }}.pointer
}
{{- end }}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) SetPage(i int64) *{{ $.Name }}Filter {
	{{ $.Receiver }}.Page = &i
	return {{ $.Receiver }}.pointer
}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) SetPageSize(i int64) *{{ $.Name }}Filter {
	{{ $.Receiver }}.PageSize = &i
	return {{ $.Receiver }}.pointer
}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) GetPage() int64 {
	if {{ $.Receiver }}.Page == nil || *{{ $.Receiver }}.Page < 1 {
		return 1
	}
	return *{{ $.Receiver }}.Page
}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) GetPageSize() int64 {
	if {{ $.Receiver }}.PageSize == nil || *{{ $.Receiver }}.PageSize <= 0 {
		return 100
	}
	return *{{ $.Receiver }}.PageSize
}

func ({{ $.Receiver }} *{{ $.TitleName }}Filter) GetFilter() []predicate.{{ $.Name }} {
	filters := []predicate.{{ $.Name }}{}

	if {{ $.Receiver }}.ID != nil {
		filters = append(filters, {{ $.LowerName }}.ID(*{{ $.Receiver }}.ID))
	}

	if {{ $.Receiver }}.IDs != nil {
		filters = append(filters, {{ $.LowerName }}.IDIn({{ $.Receiver }}.IDs...))
	}

{{ range $f := $.Fields }}
	if {{ $.Receiver }}.{{ $f.StructField }} != nil {
		filters = append(filters, {{ $.LowerName }}.{{ $f.StructField }}(*{{ $.Receiver }}.{{ $f.StructField }}))
	}
{{ end }}

	return filters
}

type {{ $.Name }}Update struct {
	{{- range $f := $.Fields }}
        {{- if eq $f.StructField "Created" "Updated" }}
        {{- else }}
		{{ $f.StructField }} {{- if not $f.Type.Nillable }}*{{- end }}{{ $f.Type }} 
        {{- end }}
	{{- end }}
	columns []string
}

func New{{ $.Name }}Update() *{{ $.Name }}Update {
	return &{{ $.Name }}Update{}
}

{{- range $f := $.Fields }}
    {{- if eq $f.StructField "Created" "Updated" }}
    {{- else }}
func ({{ $.Receiver }} *{{ $.Name }}Update) Set{{ $f.StructField }}(i {{ $f.Type }}) *{{ $.Name }}Update {
	{{ $.Receiver}}.{{ $f.StructField }} = {{- if not $f.Type.Nillable }}&{{- end }}i
	return {{ $.Receiver }}
}

func ({{ $.Receiver }} *{{ $.Name }}Update) Get{{ $f.StructField }}() {{- if not $f.Type.Nillable }}*{{- end }}{{ $f.Type }} {
	return {{ $.Receiver }}.{{ $f.StructField }}
}
    {{- end }}
{{- end }}

func ({{ $.Receiver }} *{{ $.Name }}Update) GetColumns() []string {
{{- range $f := $.Fields }}
    {{- if eq $f.StructField "Created" "Updated" }}
    {{- else }}
	if {{ $.Receiver }}.{{ $f.StructField }} != nil {
		{{ $.Receiver }}.columns = append({{ $.Receiver }}.columns, {{ $.LowerName }}.Field{{ $f.StructField }})
	}
    {{- end }}
{{- end }}
	return {{ $.Receiver }}.columns
}

type {{ $.Name }}Order struct {
	Asc   bool
	Field string
}

func New{{ $.Name }}Order(field string, asc bool) {{ $.Name }}Order {
	return {{ $.Name }}Order{Field: field, Asc: asc}
}

type {{ $.Name }}Orders []{{ $.Name }}Order

func New{{ $.Name }}Orders(orders ...{{ $.Name }}Order) {{ $.Name }}Orders {
	return orders
}

func ({{ $.Receiver }} {{ $.Name }}Orders) GetOrder() []{{ $.LowerName }}.OrderOption {
	orders := make([]{{ $.LowerName }}.OrderOption, len({{ $.Receiver }}))
	for idx, ord := range {{ $.Receiver }} {
		fn := sql.OrderDesc
		if ord.Asc {
			fn = sql.OrderAsc
		}
		switch ord.Field {
		case {{ $.LowerName }}.FieldID:
			orders[idx] = {{ $.LowerName }}.ByID(fn())
	{{- range $f := $.Fields }}
		case {{ $.LowerName }}.Field{{ $f.StructField }}:
			orders[idx] = {{ $.LowerName }}.By{{ $f.StructField }}(fn())
	{{- end }}
		}
	}
	return orders
}
